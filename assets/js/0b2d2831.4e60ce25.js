"use strict";(globalThis.webpackChunkvertigis_studio_dev_center=globalThis.webpackChunkvertigis_studio_dev_center||[]).push([[2617],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(t),h=i,m=u["".concat(l,".").concat(h)]||u[h]||c[h]||o;return t?a.createElement(m,r(r({ref:n},p),{},{components:t})):a.createElement(m,r({ref:n},p))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var d=2;d<o;d++)r[d]=t[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6742:(e,n,t)=>{t.d(n,{Z:()=>c});var a=t(7294),i=t(3727),o=t(2263),r=t(3919),s=t(412);const l=(0,a.createContext)({collectLink:()=>{}});var d=t(4996),p=t(8780);const c=function({isNavLink:e,to:n,href:t,activeClassName:c,isActive:u,"data-noBrokenLinkCheck":h,autoAddBaseUrl:m=!0,...g}){var v;const{siteConfig:{trailingSlash:b}}=(0,o.Z)(),{withBaseUrl:y}=(0,d.C)(),f=(0,a.useContext)(l),k=n||t,w=(0,r.Z)(k),N=null==k?void 0:k.replace("pathname://","");let C=void 0!==N?(V=N,m&&(e=>e.startsWith("/"))(V)?y(V):V):void 0;var V;C&&w&&(C=(0,p.applyTrailingSlash)(C,b));const B=(0,a.useRef)(!1),S=e?i.OL:i.rU,x=s.Z.canUseIntersectionObserver;let P;(0,a.useEffect)((()=>(!x&&w&&null!=C&&window.docusaurus.prefetch(C),()=>{x&&P&&P.disconnect()})),[C,x,w]);const I=null!==(v=null==C?void 0:C.startsWith("#"))&&void 0!==v&&v,E=!C||!w||I;return C&&w&&!I&&!h&&f.collectLink(C),E?a.createElement("a",{href:C,...k&&!w&&{target:"_blank",rel:"noopener noreferrer"},...g}):a.createElement(S,{...g,onMouseEnter:()=>{B.current||null==C||(window.docusaurus.preload(C),B.current=!0)},innerRef:e=>{var n,t;x&&e&&w&&(n=e,t=()=>{null!=C&&window.docusaurus.prefetch(C)},P=new window.IntersectionObserver((e=>{e.forEach((e=>{n===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(P.unobserve(n),P.disconnect(),t())}))})),P.observe(n))},to:C||"",...e&&{isActive:u,activeClassName:c}})}},3919:(e,n,t)=>{function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function i(e){return void 0!==e&&!a(e)}t.d(n,{Z:()=>i,b:()=>a})},4996:(e,n,t)=>{t.d(n,{C:()=>o,Z:()=>r});var a=t(2263),i=t(3919);function o(){const{siteConfig:{baseUrl:e="/",url:n}={}}=(0,a.Z)();return{withBaseUrl:(t,a)=>function(e,n,t,{forcePrependBaseUrl:a=!1,absolute:o=!1}={}){if(!t)return t;if(t.startsWith("#"))return t;if((0,i.b)(t))return t;if(a)return n+t;const r=t.startsWith(n)?t:n+t.replace(/^\//,"");return o?e+r:r}(n,e,t,a)}}function r(e,n={}){const{withBaseUrl:t}=o();return t(e,n)}},8802:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){if(e.startsWith("#"))return e;if(void 0===n)return e;const[t]=e.split(/[#?]/),a="/"===t?"/":n?(i=t).endsWith("/")?i:`${i}/`:function(e){return e.endsWith("/")?e.slice(0,-1):e}(t);var i;return e.replace(t,a)}},8780:function(e,n,t){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.uniq=n.applyTrailingSlash=void 0;var i=t(8802);Object.defineProperty(n,"applyTrailingSlash",{enumerable:!0,get:function(){return a(i).default}});var o=t(9964);Object.defineProperty(n,"uniq",{enumerable:!0,get:function(){return a(o).default}})},9964:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return Array.from(new Set(e))}},9715:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=t(7462),i=(t(7294),t(3905)),o=(t(6742),t(4996));const r={title:"Creating Custom Bands with the Inline SDK",author:"Michael Kowal",authorTitle:"Software Developer",authorURL:"https://github.com/MichaelKowal",authorImageURL:"https://github.com/MichaelKowal.png",tags:["inline","web"]},s=void 0,l={permalink:"/blog/2023/06/20/inline-sdk",source:"@site/blog/2023-06-20-inline-sdk.mdx",title:"Creating Custom Bands with the Inline SDK",description:"With VertiGIS Inline 2.3 and later, users now have the ability to create their own custom bands that run right in Inline using the VertiGIS Inline SDK. These custom bands are made with React and TypeScript, giving authors total control over what the band can do. Today, we will run through the steps to build, deploy and use a custom band in an Inline view.",date:"2023-06-20T00:00:00.000Z",formattedDate:"June 20, 2023",tags:[{label:"inline",permalink:"/blog/tags/inline"},{label:"web",permalink:"/blog/tags/web"}],readingTime:19.665,truncated:!0,nextItem:{title:"Mobile Generic Event Listener",permalink:"/blog/2023/03/01/mobile-generic-event-listener"}},d=[{value:"Getting Started",id:"getting-started",children:[]},{value:"Exploring the SDK",id:"exploring-the-sdk",children:[{value:"Registry Service",id:"registry-service",children:[]},{value:"Types",id:"types",children:[]},{value:"Sample Band",id:"sample-band",children:[]}]},{value:"Creating a new band",id:"creating-a-new-band",children:[{value:"Add settings for the Inline Designer",id:"add-settings-for-the-inline-designer",children:[]},{value:"Creating a Video Player React Hook",id:"creating-a-video-player-react-hook",children:[]},{value:"Creating the component",id:"creating-the-component",children:[]},{value:"Styling the band",id:"styling-the-band",children:[]}]},{value:"Deploying the band",id:"deploying-the-band",children:[{value:"Build the band",id:"build-the-band",children:[]},{value:"Adding the band to your app",id:"adding-the-band-to-your-app",children:[]},{value:"Using a custom Web App in Inline",id:"using-a-custom-web-app-in-inline",children:[]},{value:"Adding the custom band to your view",id:"adding-the-custom-band-to-your-view",children:[]}]},{value:"Syncing the band with Inline",id:"syncing-the-band-with-inline",children:[]},{value:"Production Build",id:"production-build",children:[]},{value:"Conclusion",id:"conclusion",children:[]}],p={toc:d};function c({components:e,...n}){return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"With VertiGIS Inline ",(0,i.kt)("inlineCode",{parentName:"p"},"2.3")," and later, users now have the ability to create their own custom bands that run right in Inline using the VertiGIS Inline SDK. These custom bands are made with React and TypeScript, giving authors total control over what the band can do. Today, we will run through the steps to build, deploy and use a custom band in an Inline view."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"To use these new features, you will need the latest versions of VertiGIS Inline, VertiGIS Studio Web, and the VertiGIS Inline SDK."))),(0,i.kt)("h2",{id:"getting-started"},"Getting Started"),(0,i.kt)("p",null,"You will need a few tools to build a custom band:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://nodejs.org/en"},"Download and install Node.js")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://code.visualstudio.com/download"},"Download and install Visual Studio Code"))),(0,i.kt)("p",null,"Once you are set up with those you can create a folder with everything you need to build a custom band. With the terminal of your choice, create instance of inline sdk with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npx @vertigis/inline-sdk create <my-project>\n")),(0,i.kt)("p",null,"Open the folder with the name you supplied in VS Code. You should see a number of files already there."),(0,i.kt)("h2",{id:"exploring-the-sdk"},"Exploring the SDK"),(0,i.kt)("p",null,"There are a few key parts of the SDK that you can use to build your own custom band."),(0,i.kt)("h3",{id:"registry-service"},"Registry Service"),(0,i.kt)("p",null,"Custom bands are registered in Inline using a custom VertiGIS Web service. This service is found in ",(0,i.kt)("inlineCode",{parentName:"p"},"src/services/CustomBandRegistry/CustomBandRegistry.ts"),". This file loads any available custom bands and registers them with Inline when it is added to an app. It can register any number of custom bands at the same time."),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Modifying this service is not recommended. It can result in unexpected behaviour including causing your app to crash. Do so at your own risk."))),(0,i.kt)("h3",{id:"types"},"Types"),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/definitions/inline.d.ts")," file you can find all of the Inline types that you can use to create your custom band. There are comments provided in this file to describe the uses of these types."),(0,i.kt)("h3",{id:"sample-band"},"Sample Band"),(0,i.kt)("p",null,"The Inline SDK comes preinstalled with a sample band that you can use for reference. In your SDK navigate to ",(0,i.kt)("inlineCode",{parentName:"p"},"src/bands/SampleBand"),". In here you will find 4 files."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Band.css")," contains the styles that are applied to the chart."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Band.tsx")," contains the React code that is run in Inline."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"designer.ts")," describes the settings that are available when configuring a custom band in the Inline Designer."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"index.ts")," combines it all together to be properly registered.")),(0,i.kt)("h2",{id:"creating-a-new-band"},"Creating a new band"),(0,i.kt)("p",null,"The band we will be creating today will be able to display a video and seek to any point in the video based on the location of the crosshair on the map and on other inline charts."),(0,i.kt)("p",null,"To create a new band run"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npx @vertigis/inline-sdk generate VideoBand\n")),(0,i.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"generate")," command must be run from within the custom band project folder."))),(0,i.kt)("h3",{id:"add-settings-for-the-inline-designer"},"Add settings for the Inline Designer"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"designer.ts")," file provides the Inline designer with a settings schema to display configurable settings for a custom band. These settings can be any combination of:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"input"),(0,i.kt)("li",{parentName:"ul"},"checkbox"),(0,i.kt)("li",{parentName:"ul"},"radio"),(0,i.kt)("li",{parentName:"ul"},"dropdown")),(0,i.kt)("p",null,"The Sample Band has some examples of how to use these settings. The ",(0,i.kt)("inlineCode",{parentName:"p"},"src/bands/VideoBand/designer.ts")," file will have a small function ready to go."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/bands/VideoBand/designer.ts"',title:'"src/bands/VideoBand/designer.ts"'},'import { InlineDesignerConfig } from "inline";\n\nexport const getDesignerConfig = (): InlineDesignerConfig => {\n    const config: InlineDesignerConfig = [\n        {\n            title: "Video Band Settings",\n            fields: [],\n        },\n    ];\n\n    return config;\n};\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"InlineDesignerConfig")," is a list of settings sections. Each section has a name and list of fields that can be configured by users in the Inline designer."),(0,i.kt)("p",null,"Next, add an input field for the video URL."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/bands/VideoBand/designer.ts"',title:'"src/bands/VideoBand/designer.ts"'},'// highlight-next-line\nimport { InlineDesignerConfig, InputDesignerConfig } from "inline";\n\nexport const getDesignerConfig = () => {\n    const config: InlineDesignerConfig = [\n        {\n            title: "Video Band Settings",\n            fields: [],\n        },\n    ];\n\n    // highlight-start\n    const urlField: InputDesignerConfig = {\n        id: "url",\n        type: "input",\n        default: "",\n        label: "Video URL",\n        helpText:\n            "The URL of the video. This must be a valid URL to a video file.",\n    };\n\n    config[0].fields.push(urlField);\n    // highlight-end\n\n    return config;\n};\n')),(0,i.kt)("p",null,"This pattern can be repeated to create any other settings that are necessary for the band."),(0,i.kt)("h3",{id:"creating-a-video-player-react-hook"},"Creating a Video Player React Hook"),(0,i.kt)("p",null,"Without a video player, this band will not do much. Let's create one using a custom React Hook."),(0,i.kt)("p",null,"Create a new file the the ",(0,i.kt)("inlineCode",{parentName:"p"},"VideoBand")," folder called ",(0,i.kt)("inlineCode",{parentName:"p"},"useVideoPlayer.ts"),". In this file we will include all the tools we need to create an interactive video player in a custom band."),(0,i.kt)("p",null,"Set up the hook as a function that takes a single parameter, ",(0,i.kt)("inlineCode",{parentName:"p"},"videoElement"),". This is a reference to a video HTML element."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/bands/VideoBand/useVideoPlayer.ts"',title:'"src/bands/VideoBand/useVideoPlayer.ts"'},"const useVideoPlayer = (\n    videoElement: React.MutableRefObject<HTMLVideoElement>\n) => {};\n\nexport default useVideoPlayer;\n")),(0,i.kt)("p",null,"Add some state to track to current status of the player."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/bands/VideoBand/useVideoPlayer.ts"',title:'"src/bands/VideoBand/useVideoPlayer.ts"'},'// highlight-next-line\nimport { useState } from "react";\n\nconst useVideoPlayer = (\n    videoElement: React.MutableRefObject<HTMLVideoElement>\n) => {\n    // highlight-start\n    const [playerState, setPlayerState] = useState({\n        isPlaying: false,\n        progress: 0,\n        speed: 1,\n        isMuted: false,\n    });\n    //highlight-end\n};\n')),(0,i.kt)("p",null,"Add a function to toggle the current play/pause state of the video."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/bands/VideoBand/useVideoPlayer.ts"',title:'"src/bands/VideoBand/useVideoPlayer.ts"'},"const useVideoPlayer = (videoElement: React.MutableRefObject<HTMLVideoElement>) => {\n    ...\n    // highlight-start\n    const togglePlay = () => {\n        setPlayerState({\n            ...playerState,\n            isPlaying: !playerState.isPlaying\n        });\n    }\n    //highlight-end\n}\n")),(0,i.kt)("p",null,"Add a function that updates the progress bar of the video as it is playing. The progress is any value between 0 and 100 and is not directly related to the length of the video."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/bands/VideoBand/useVideoPlayer.ts"',title:'"src/bands/VideoBand/useVideoPlayer.ts"'},"const useVideoPlayer = (videoElement: React.MutableRefObject<HTMLVideoElement>) => {\n    ...\n    // highlight-start\n    const handleOnTimeUpdate = () => {\n        const progress = (videoElement.current.currentTime / videoElement.current.duration) * 100;\n        setPlayerState({\n            ...playerState,\n            progress\n        });\n    };\n    //highlight-end\n}\n")),(0,i.kt)("p",null,"Add a function to seek to any point in the video, taking a number that is the percentage of the video length that the video should start playing at."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/bands/VideoBand/useVideoPlayer.ts"',title:'"src/bands/VideoBand/useVideoPlayer.ts"'},"const useVideoPlayer = (videoElement: React.MutableRefObject<HTMLVideoElement>) => {\n    ...\n    // highlight-start\n    const seekTo = (value: number) => {\n        if (value >= 0 && value <= 100) {\n            videoElement.current.currentTime = (videoElement.current.duration / 100) * value;\n            setPlayerState({\n                ...playerState,\n                progress: value\n            });\n        }\n    };\n    //highlight-end\n}\n")),(0,i.kt)("p",null,"Add functions to change the playback speed of the video and turn the sound on/off."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/bands/VideoBand/useVideoPlayer.ts"',title:'"src/bands/VideoBand/useVideoPlayer.ts"'},"const useVideoPlayer = (videoElement: React.MutableRefObject<HTMLVideoElement>) => {\n    ...\n    // highlight-start\n    const handleVideoSpeed = (event) => {\n        const speed = +event.target.value;\n        videoElement.current.playbackRate = speed;\n        setPlayerState({\n            ...playerState,\n            speed\n        });\n    }\n\n    const toggleMute = () => {\n        setPlayerState({\n            ...isMuted: !playerState.isMuted\n        });\n    }\n    //highlight-end\n}\n")),(0,i.kt)("p",null,"Add ",(0,i.kt)("inlineCode",{parentName:"p"},"useEffect")," hooks that will update the muted state of the video player, the playback speed, and the current play/pause state of the video player when their respective states have been changed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/bands/VideoBand/useVideoPlayer.ts"',title:'"src/bands/VideoBand/useVideoPlayer.ts"'},'// highlight-next-line\nimport { useState, useEffect } from "react";\n\nconst useVideoPlayer = (videoElement: React.MutableRefObject<HTMLVideoElement>) => {\n    ...\n    // highlight-start\n    useEffect(() => {\n        videoElement.current.muted = playerState.isMuted;\n    }, [playerState.isMuted, videoElement]);\n\n    useEffect(() => {\n        videoElement.current.playbackRate = playerState.speed;\n    }, [playerState.speed, videoElement]);\n\n    useEffect(() => {\n        playerState.isPlaying ?\n        void videoElement.current.play() :\n        void videoElement.current.pause();\n    }, [playerState.isPlaying, videoElement]);\n    //highlight-end\n}\n')),(0,i.kt)("p",null,"Finally, provide all of these functions to the consumer of the hook by returning an object containing everything needed to create an interactive video player."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/bands/VideoBand/useVideoPlayer.ts"',title:'"src/bands/VideoBand/useVideoPlayer.ts"'},'// highlight-next-line\nimport { useState, useEffect } from "react";\n\nconst useVideoPlayer = (videoElement: React.MutableRefObject<HTMLVideoElement>) => {\n    ...\n    // highlight-start\n    return {\n        playerState,\n        togglePlay,\n        handleOnTimeUpdate,\n        handleVideoSpeed,\n        toggleMute,\n        seekTo\n    }\n    //highlight-end\n}\n')),(0,i.kt)("p",null,"With everything put together, your ",(0,i.kt)("inlineCode",{parentName:"p"},"useVideoPlayer")," hook should look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/bands/VideoBand/useVideoPlayer.ts"',title:'"src/bands/VideoBand/useVideoPlayer.ts"'},'import { useState, useEffect } from "react";\n\nconst useVideoPlayer = (\n    videoElement: React.MutableRefObject<HTMLVideoElement>\n) => {\n    const [playerState, setPlayerState] = useState({\n        isPlaying: false,\n        progress: 0,\n        speed: 1,\n        isMuted: false,\n    });\n\n    const togglePlay = () => {\n        setPlayerState({\n            ...playerState,\n            isPlaying: !playerState.isPlaying,\n        });\n    };\n\n    const handleOnTimeUpdate = () => {\n        const progress =\n            (videoElement.current.currentTime /\n                videoElement.current.duration) *\n            100;\n        setPlayerState({\n            ...playerState,\n            progress,\n        });\n    };\n\n    const seekTo = (value: number) => {\n        if (value >= 0 && value <= 100) {\n            videoElement.current.currentTime =\n                (videoElement.current.duration / 100) * value;\n            setPlayerState({\n                ...playerState,\n                progress: value,\n            });\n        }\n    };\n\n    const handleVideoSpeed = (event) => {\n        const speed = +event.target.value;\n        videoElement.current.playbackRate = speed;\n        setPlayerState({\n            ...playerState,\n            speed,\n        });\n    };\n\n    const toggleMute = () => {\n        setPlayerState({\n            ...playerState,\n            isMuted: !playerState.isMuted,\n        });\n    };\n\n    useEffect(() => {\n        videoElement.current.muted = playerState.isMuted;\n    }, [playerState.isMuted, videoElement]);\n\n    useEffect(() => {\n        videoElement.current.playbackRate = playerState.speed;\n    }, [playerState.speed, videoElement]);\n\n    useEffect(() => {\n        playerState.isPlaying\n            ? void videoElement.current.play()\n            : void videoElement.current.pause();\n    }, [playerState.isPlaying, videoElement]);\n\n    return {\n        playerState,\n        togglePlay,\n        handleOnTimeUpdate,\n        handleVideoSpeed,\n        toggleMute,\n        seekTo,\n    };\n};\n\nexport default useVideoPlayer;\n')),(0,i.kt)("h3",{id:"creating-the-component"},"Creating the component"),(0,i.kt)("p",null,"Now, add the hook to your custom band. Open ",(0,i.kt)("inlineCode",{parentName:"p"},"src/bands/VideoBand/Band.tsx"),". Here you will find a simple react component. This component is the entrypoint for the band. In the ",(0,i.kt)("inlineCode",{parentName:"p"},"Band")," component, add a ",(0,i.kt)("inlineCode",{parentName:"p"},"player")," ref and add your ",(0,i.kt)("inlineCode",{parentName:"p"},"useVideoPlayer")," hook. Add the ",(0,i.kt)("inlineCode",{parentName:"p"},"props")," function parameter to the component."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/bands/VideoBand/Band.tsx"',title:'"src/bands/VideoBand/Band.tsx"'},'import React, { useRef } from "react";\nimport { BandProps } from "inline";\nimport "./Band.css";\nimport useVideoPlayer from "./useVideoPlayer";\n\nexport const Band: React.FC<BandProps> = (props) => {\n    const player = useRef<HTMLVideoElement>();\n    const {\n        playerState,\n        togglePlay,\n        handleOnTimeUpdate,\n        handleVideoSpeed,\n        toggleMute,\n        seekTo,\n    } = useVideoPlayer(player);\n\n    return <div className="video-band">Video Band</div>;\n};\n')),(0,i.kt)("p",null,"Add a video player and controls in a wrapper in the return statement of the component. The video player will take the URL to your video, player ref and the ",(0,i.kt)("inlineCode",{parentName:"p"},"handleOnTimeUpdate")," function as props to the video player. The URL will be accessed using the ",(0,i.kt)("inlineCode",{parentName:"p"},"band.customBandSettings")," prop passed in to the custom band."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This custom video band only works with hosted videos, not embedded video players."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/bands/VideoBand/Band.tsx"',title:'"src/bands/VideoBand/Band.tsx"'},'return (\n    <div className="video-band">\n        // highlight-start\n        <div className="video-wrapper">\n            <video\n                ref={player}\n                onTimeUpdate={handleOnTimeUpdate}\n                src={props.band.customBandSettings.url ?? ""}\n            />\n            <div className="controls"></div>\n        </div>\n        // highlight-end\n    </div>\n);\n')),(0,i.kt)("p",null,"The first control we will add is the start/stop button. This will show an icon depending on whether the video is playing or paused. To use that icon we need to install an npm package, ",(0,i.kt)("inlineCode",{parentName:"p"},"react-icons"),". Run"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm install react-icons\n")),(0,i.kt)("p",null,"in the terminal to install all the icons you will need for this project."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/bands/VideoBand/Band.tsx"',title:'"src/bands/VideoBand/Band.tsx"'},'import { BiPlay, BiPause} from "react-icons/bi";\n...\nreturn (\n    <div className="video-band">\n        <div className="video-wrapper">\n            ...\n            <div className="controls">\n                // highlight-start\n                <div className="actions">\n                    <button onClick={togglePlay}>\n                        {!playerState.isPlaying ? (\n                            <BiPlay color="white" />\n                        ) : (\n                            <BiPause color="white" />\n                        )}\n                    </button>\n                </div>\n                // highlight-end\n            </div>\n        </div>\n    </div>\n);\n')),(0,i.kt)("p",null,"Add a progress bar that allows the user to seek through the length of the video and shows the current timestamp of the video. We also need to add a function to handle the input's onChange prop."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/bands/VideoBand/Band.tsx"',title:'"src/bands/VideoBand/Band.tsx"'},'// highlight-start\nconst handleVideoProgress = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = isNaN(+event.target.value) ? 0 : +event.target.value;\n    seekTo(value);\n}\n// highlight-end\n\nreturn (\n    <div className="video-band">\n        <div className="video-wrapper">\n            ...\n            <div className="controls">\n                {...}\n                // highlight-start\n                <input\n                    type="range"\n                    min="0"\n                    max="100"\n                    value={playerState.progress}\n                    onChange={handleVideoProgress}\n                />\n                // highlight-end\n            </div>\n        </div>\n    </div>\n);\n')),(0,i.kt)("p",null,"Add a dropdown with some options for different playback speeds."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/bands/VideoBand/Band.tsx"',title:'"src/bands/VideoBand/Band.tsx"'},'return (\n    <div className="video-band">\n        <div className="video-wrapper">\n            ...\n            <div className="controls">\n                {...}\n                // highlight-start\n                <select\n                    className="velocity"\n                    value={playerState.speed}\n                    onChange={handleVideoSpeed}\n                >\n                    <option value="0.50">0.50</option>\n                    <option value="1">1</option>\n                    <option value="1.25">1.25</option>\n                    <option value="2">2</option>\n                </select>\n                // highlight-end\n            </div>\n        </div>\n    </div>\n);\n')),(0,i.kt)("p",null,"The last thing to add is the mute button."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/bands/VideoBand/Band.tsx"',title:'"src/bands/VideoBand/Band.tsx"'},'return (\n    <div className="video-band">\n        <div className="video-wrapper">\n            ...\n            <div className="controls">\n                {...}\n                // highlight-start\n                <button className="mute-btn" onClick={toggleMute}>\n                    {!playerState.isMuted ? (\n                        <BiVolumeFull color="white"/>\n                    ) : (\n                        <BiVolumeMute color="white"/>\n                    )}\n                </button>\n                // highlight-end\n            </div>\n        </div>\n    </div>\n);\n')),(0,i.kt)("p",null,"With everything added your component should look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/bands/VideoBand/Band.tsx"',title:'"src/bands/VideoBand/Band.tsx"'},'import debounce from "lodash.debounce";\nimport {\n    BiPlay,\n    BiPause,\n    BiVolumeFull,\n    BiVolumeMute,\n} from "react-icons/bi";\nimport React, { useEffect, useRef } from "react";\nimport useVideoPlayer from "./useVideoPlayer";\nimport "./Band.css";\nimport { BandProps } from "inline";\n\nexport const Band: React.FC<BandProps> = (props) => {\n    const player = useRef<HTMLVideoElement>();\n    const {\n        playerState,\n        togglePlay,\n        handleOnTimeUpdate,\n        handleVideoSpeed,\n        toggleMute,\n        seekTo,\n    } = useVideoPlayer(player);\n\n    const handleVideoProgress = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const value = isNaN(+event.target.value)\n            ? 0\n            : +event.target.value;\n        seekTo(value);\n    };\n\n    return (\n        <div className="video-band container">\n            <div className="video-wrapper">\n                <video\n                    ref={player}\n                    onTimeUpdate={handleOnTimeUpdate}\n                    src={props.band.customBandSettings.url ?? ""}\n                />\n                <div className="controls">\n                    <div className="actions">\n                        <button onClick={togglePlay}>\n                            {!playerState.isPlaying ? (\n                                <BiPlay color="white" />\n                            ) : (\n                                <BiPause color="white" />\n                            )}\n                        </button>\n                    </div>\n                    <input\n                        type="range"\n                        min="0"\n                        max="100"\n                        value={playerState.progress}\n                        onChange={handleVideoProgress}\n                    />\n                    <select\n                        className="velocity"\n                        value={playerState.speed}\n                        onChange={handleVideoSpeed}\n                    >\n                        <option value="0.50">0.50</option>\n                        <option value="1">1</option>\n                        <option value="1.25">1.25</option>\n                        <option value="2">2</option>\n                    </select>\n                    <button className="mute-btn" onClick={toggleMute}>\n                        {!playerState.isMuted ? (\n                            <BiVolumeFull color="white" />\n                        ) : (\n                            <BiVolumeMute color="white" />\n                        )}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n')),(0,i.kt)("h3",{id:"styling-the-band"},"Styling the band"),(0,i.kt)("p",null,"With the band created let's add some styling. Add this to the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/bands/VideoBand/Band.css")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="src/bands/VideoBand/Band.css"',title:'"src/bands/VideoBand/Band.css"'},'.video-band.container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 2rem;\n    width: 100%;\n}\n\n.video-band h1 {\n    color: white;\n}\n\n.video-band video {\n    width: 100%;\n}\n\n.video-band .video-wrapper {\n    width: 100%;\n    max-width: 700px;\n    position: relative;\n    display: flex;\n    justify-content: center;\n    overflow: hidden;\n    border-radius: 10px;\n}\n\n.video-band .video-wrapper:hover .controls {\n    transform: translateY(0%);\n}\n\n.video-band .controls {\n    display: flex;\n    align-items: center;\n    justify-content: space-evenly;\n    position: absolute;\n    bottom: 30px;\n    padding: 14px;\n    width: 100%;\n    max-width: 500px;\n    flex-wrap: wrap;\n    background: rgba(255, 255, 255, 0.25);\n    box-shadow: 0 8px 32px 0 rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(4px);\n    -webkit-backdrop-filter: blur(4px);\n    border-radius: 10px;\n    border: 1px solid rgba(255, 255, 255, 0.18);\n    transform: translateY(150%);\n    transition: all 0.3s ease-in-out;\n}\n\n.video-band .actions button {\n    background: none;\n    border: none;\n    outline: none;\n    cursor: pointer;\n}\n\n.video-band .actions button i {\n    background-color: none;\n    color: white;\n    font-size: 30px;\n}\n\ninput[type="range"] {\n    -webkit-appearance: none !important;\n    background: rgba(255, 255, 255, 0.2);\n    border-radius: 20px;\n    height: 4px;\n    width: 350px;\n}\n\n.video-band input[type="range"]::-webkit-slider-thumb {\n    -webkit-appearance: none !important;\n    cursor: pointer;\n    height: 6px;\n}\n\n.video-band input[type="range"]::-moz-range-progress {\n    background: white;\n}\n\n.video-band .velocity {\n    appearance: none;\n    background: none;\n    color: white;\n    outline: none;\n    border: none;\n    text-align: center;\n    font-size: 16px;\n}\n\n.video-band .mute-btn {\n    background: none;\n    border: none;\n    outline: none;\n    cursor: pointer;\n}\n\n.video-band .mute-btn i {\n    background-color: none;\n    color: white;\n    font-size: 20px;\n}\n')),(0,i.kt)("h2",{id:"deploying-the-band"},"Deploying the band"),(0,i.kt)("h3",{id:"build-the-band"},"Build the band"),(0,i.kt)("p",null,"Now that the band has been created, we can add it to VertiGIS Studio Web and load it into Inline. In the terminal, run"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm run start\n")),(0,i.kt)("p",null,"This will start up a development server and create a temporary build of your custom band."),(0,i.kt)("h3",{id:"adding-the-band-to-your-app"},"Adding the band to your app"),(0,i.kt)("p",null,"Open VertiGIS Studio Web Designer. In Web Designer, open your Inline app."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If you do not have an existing Inline app you can create a new app using the VertiGIS Inline template."))),(0,i.kt)("p",null,"In your app, open the File menu. Open the Upload Library settings:"),(0,i.kt)("img",{src:(0,o.Z)("img/app-designer-upload-library.png")}),(0,i.kt)("p",null,"In the popup, add ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:4444/main.js")," as a library URL:"),(0,i.kt)("img",{src:(0,o.Z)("img/app-designer-upload-library-modal.png")}),(0,i.kt)("p",null,"Click the ",(0,i.kt)("inlineCode",{parentName:"p"},"Add Library")," button beside the library link input. Click Save Changes. Your app will be saved and be refreshed."),(0,i.kt)("p",null,"With this done you can close Web Designer and open the Inline Designer."),(0,i.kt)("h3",{id:"using-a-custom-web-app-in-inline"},"Using a custom Web App in Inline"),(0,i.kt)("p",null,"In the Inline designer, open the view you want to add the band to."),(0,i.kt)("p",null,"Open the Sandbox settings on the left side panel:"),(0,i.kt)("img",{src:(0,o.Z)("img/inline-sandbox-settings.png")}),(0,i.kt)("p",null,"At the top of the panel, select ",(0,i.kt)("inlineCode",{parentName:"p"},"Change Web App"),". This will open a window with a list of your VertiGIS Studio Web apps. Choose the Web app that you added your custom band library to."),(0,i.kt)("p",null,"You can confirm that the custom bands have been loaded by checking your browser console. You should see a console log for each band that has been loaded."),(0,i.kt)("img",{src:(0,o.Z)("img/inline-custom-band-console.png")}),(0,i.kt)("h3",{id:"adding-the-custom-band-to-your-view"},"Adding the custom band to your view"),(0,i.kt)("p",null,"With Inline running your custom Web app, you can now add your band to your view using the Inline designer."),(0,i.kt)("p",null,"Add a new band to Inline. Open the new Band settings. In the ",(0,i.kt)("inlineCode",{parentName:"p"},"Band Type"),' dropdown choose "Custom".'),(0,i.kt)("img",{src:(0,o.Z)("img/inline-band-type-dropdown.png")}),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"Custom Band Name"),' dropdown, choose "VideoBand".'),(0,i.kt)("img",{src:(0,o.Z)("img/inline-band-name-dropdown.png")}),(0,i.kt)("p",null,"You should see a new settings section with the option to add a Video URL. Add a URL to a ",(0,i.kt)("inlineCode",{parentName:"p"},"Video URL")," setting."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Custom bands will sometimes require a refresh of the Inline sandbox before you can see them reflected in the charts. Click the ",(0,i.kt)("inlineCode",{parentName:"p"},"Refresh Sandbox")," button in the top left of the Inline designer if you are not seeing your custom band in your view."))),(0,i.kt)("p",null,"Choose a route and range for your view. When the bands load you should see your custom video band playing with your video. Hovering over the video should show the video controls."),(0,i.kt)("img",{src:(0,o.Z)("img/inline-video-band.png")}),(0,i.kt)("h2",{id:"syncing-the-band-with-inline"},"Syncing the band with Inline"),(0,i.kt)("p",null,"The band that we have now will show and run a video with all the controls, but it won't sync with the rest of your Inline bands. In order to do that we need to listen to some inline events. The Inline SDK allows custom bands to listen for and fire any Inline events. Types and descriptions for these events can be found in the ",(0,i.kt)("inlineCode",{parentName:"p"},"definitions/Inline.d.ts")," file in the project."),(0,i.kt)("p",null,"Open VS Code and the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/bands/VideoBand/Band.tsx")," file. Add a new ",(0,i.kt)("inlineCode",{parentName:"p"},"useEffect")," hook to the Band component."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/bands/VideoBand/Band.tsx"',title:'"src/bands/VideoBand/Band.tsx"'},'// highlight-next-line\nimport React, { useEffect, useRef } from "react";\n...\nexport const Band: React.FC<BandProps> = (props) => {\n    ...\n\n    // highlight-next-line\n    useEffect(() => {})\n\n    return(...)\n}\n')),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"useEffect")," hook we will add some Inline event handlers using the ",(0,i.kt)("inlineCode",{parentName:"p"},"InlineManager")," that is passed to the component via the props."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"InlineManager")," has a variety of different tools that can be used from within a custom band that can change how you interact with Inline. Many of the tools are typed in the Inline SDK and can be found in the ",(0,i.kt)("inlineCode",{parentName:"p"},"definitions/Inline.d.ts")," file."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/bands/VideoBand/Band.tsx"',title:'"src/bands/VideoBand/Band.tsx"'},'useEffect(() => {\n    const mapCrosshairEvent = props.InlineManager.event(\n        "ChartCrosshairLocationUpdateEvent"\n    ).subscribe(undefined, handleCrosshairPositionChangeEvent);\n    const chartCrosshairEvent = props.InlineManager.event(\n        "XValueChangeEvent"\n    ).subscribe(undefined, handleCrosshairPositionChangeEvent);\n\n    return () => {\n        props.InlineManager.event(\n            "ChartCrosshairLocationUpdateEvent"\n        ).unsubscribe(mapCrosshairEvent);\n        props.InlineManager.event("XValueChangeEvent").unsubscribe(\n            chartCrosshairEvent\n        );\n    };\n});\n')),(0,i.kt)("p",null,"There are two different events that we are listening for here. The ",(0,i.kt)("inlineCode",{parentName:"p"},"ChartCrosshairLocationUpdateEvent")," is fired when the route is hovered over on the map. The ",(0,i.kt)("inlineCode",{parentName:"p"},"XValueChangeEvent")," is fired when a chart is hovered over. Both of these will provide the same arguments and can be dealt with via the same handler."),(0,i.kt)("p",null,"Add a new function, ",(0,i.kt)("inlineCode",{parentName:"p"},"handleCrosshairPositionChangeEvent"),", under the ",(0,i.kt)("inlineCode",{parentName:"p"},"useEffect")," hook. This function will update the progress of the video to match the current location of the crosshair on the chart."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/bands/VideoBand/Band.tsx"',title:'"src/bands/VideoBand/Band.tsx"'},'// highlight-next-line\nimport { BandProps, StationInfoEventArg } from "inline";\n...\nexport const Band: React.FC<BandProps> = (props) => {\n    ...\n\n    // highlight-start\n    const handleCrosshairPositionChangeEvent = (\n        arg: StationInfoEventArg\n    ) => {\n        // Don\'t try to update the position if the video player does not exist.\n        if (!player.current) {\n            return;\n        }\n\n        // Get the start and end measure of the current range to calculate the\n        // percent along the line.\n        const start =\n            props.InlineManager.currentRange.beginStation.measure;\n        const end = props.InlineManager.currentRange.endStation.measure;\n\n        // Ensure the measure is within the range.  If it is not, clamp it to prevent\n        // any errors.\n        const measure = Math.max(\n            start,\n            Math.min(end, arg.stationInfo.measure)\n        );\n\n        const currentRangeLength = end - start;\n        const percentageAlongLine =\n            (measure - start) / currentRangeLength;\n\n        // Move the video progress to the corresponding percentage through the video\n        // that matches the percentage along the line.\n        seekTo(percentageAlongLine * 100);\n\n        // Pause the video to be able to see where the position that was jumped to is.\n        if (playerState.isPlaying) {\n            togglePlay();\n        }\n    };\n    // highlight-end\n\n    return(...)\n}\n')),(0,i.kt)("p",null,"The last thing we want to do is add a debounce to the handler to prevent any performance issues that can happen when moving around a lot. Install Lodash's debounce tool with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm install lodash.debounce\n")),(0,i.kt)("p",null,"Wrap the ",(0,i.kt)("inlineCode",{parentName:"p"},"handleCrosshairPositionChangeEvent")," in a debounce higher order function. Give the debounce a 100ms refresh argument. Create and add a type, ",(0,i.kt)("inlineCode",{parentName:"p"},"StationInfoEventHandler"),", to the function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/bands/VideoBand/Band.tsx"',title:'"src/bands/VideoBand/Band.tsx"'},'// highlight-next-line\nimport debounce from "lodash.debounce";\n...\n// highlight-next-line\ntype StationInfoEventHandler = (arg: StationInfoEventArg) => void;\n\nexport const Band: React.FC<BandProps> = (props) => {\n    ...\n\n    // highlight-start\n    const handleCrosshairPositionChangeEvent: StationInfoEventHandler = debounce((arg: StationInfoEventArg) => {\n        ...\n    }, [100])\n    // highlight-end\n\n    return(...)\n}\n')),(0,i.kt)("p",null,"With the event handler and the event listeners added, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Band.tsx")," file should look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/bands/VideoBand/Band.tsx"',title:'"src/bands/VideoBand/Band.tsx"'},'import debounce from "lodash.debounce";\nimport {\n    BiPlay,\n    BiPause,\n    BiVolumeFull,\n    BiVolumeMute,\n} from "react-icons/bi";\nimport React, { useEffect, useRef } from "react";\nimport useVideoPlayer from "./useVideoPlayer";\nimport "./Band.css";\nimport { BandProps, StationInfoEventArg } from "inline";\n\nexport const Band: React.FC<BandProps> = (props) => {\n    const player = useRef<HTMLVideoElement>();\n    const {\n        playerState,\n        togglePlay,\n        handleOnTimeUpdate,\n        handleVideoSpeed,\n        toggleMute,\n        seekTo,\n    } = useVideoPlayer(player);\n\n    /**\n     * Subscribing to inline events can allow for better integration of custom bands into inline.\n     */\n    useEffect(() => {\n        const mapCrosshairEvent = props.InlineManager.event(\n            "ChartCrosshairLocationUpdateEvent"\n        ).subscribe(undefined, handleCrosshairPositionChangeEvent);\n        const chartCrosshairEvent = props.InlineManager.event(\n            "XValueChangeEvent"\n        ).subscribe(undefined, handleCrosshairPositionChangeEvent);\n        return () => {\n            props.InlineManager.event(\n                "ChartCrosshairLocationUpdateEvent"\n            ).unsubscribe(mapCrosshairEvent);\n            props.InlineManager.event(\n                "XValueChangeEvent"\n            ).unsubscribe(chartCrosshairEvent);\n        };\n    });\n\n    /**\n     * When the inline cursor moves, it should update the video progress to match.\n     */\n    const handleCrosshairPositionChangeEvent = debounce(\n        (arg: StationInfoEventArg) => {\n            // Don\'t try to update the position if the video player does not exist.\n            if (!player.current) {\n                return;\n            }\n\n            // Get the start and end measure of the current range to calculate the\n            // percent along the line.\n            const start =\n                props.InlineManager.currentRange.beginStation.measure;\n            const end =\n                props.InlineManager.currentRange.endStation.measure;\n\n            // Ensure the measure is within the range.  If it is not, clamp it to prevent\n            // any errors.\n            const measure = Math.max(\n                start,\n                Math.min(end, arg.stationInfo.measure)\n            );\n\n            const currentRangeLength = end - start;\n            const percentageAlongLine =\n                (measure - start) / currentRangeLength;\n\n            // Move the video progress to the corresponding percentage through the video\n            // that matches the percentage along the line.\n            seekTo(percentageAlongLine * 100);\n\n            // Pause the video to be able to see where the position that was jumped to is.\n            if (playerState.isPlaying) {\n                togglePlay();\n            }\n        },\n        [100]\n    );\n\n    const handleVideoProgress = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const value = isNaN(+event.target.value)\n            ? 0\n            : +event.target.value;\n        seekTo(value);\n    };\n\n    return (\n        <div className="video-band container">\n            <div className="video-wrapper">\n                <video\n                    src={props.band.customBandSettings.url ?? ""}\n                    ref={player}\n                    onTimeUpdate={handleOnTimeUpdate}\n                />\n                <div className="controls">\n                    <div className="actions">\n                        <button onClick={togglePlay}>\n                            {!playerState.isPlaying ? (\n                                <BiPlay color="white" />\n                            ) : (\n                                <BiPause color="white" />\n                            )}\n                        </button>\n                    </div>\n                    <input\n                        type="range"\n                        min="0"\n                        max="100"\n                        value={playerState.progress}\n                        onChange={handleVideoProgress}\n                    />\n                    <select\n                        className="velocity"\n                        value={playerState.speed}\n                        onChange={handleVideoSpeed}\n                    >\n                        <option value="0.50">0.50</option>\n                        <option value="1">1</option>\n                        <option value="1.25">1.25</option>\n                        <option value="2">2</option>\n                    </select>\n                    <button className="mute-btn" onClick={toggleMute}>\n                        {!playerState.isMuted ? (\n                            <BiVolumeFull color="white" />\n                        ) : (\n                            <BiVolumeMute color="white" />\n                        )}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n')),(0,i.kt)("p",null,"Save the file. Open the Inline designer with the view configured with your custom band. Reload the page to get your new changes. You should be able to see the video scrub through as you hover over the charts and the map."),(0,i.kt)("h2",{id:"production-build"},"Production Build"),(0,i.kt)("p",null,"Once you have a custom band working how you would like, you can create a optimized production build. In a terminal run"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm run build\n")),(0,i.kt)("p",null,"This will create a ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," folder with a ",(0,i.kt)("inlineCode",{parentName:"p"},"main.js")," file. We can replace the library link we previously added with the ",(0,i.kt)("inlineCode",{parentName:"p"},"main.js")," file and your custom band will be accessible to anyone who uses your app."),(0,i.kt)("p",null,"In Web Designer, open the Upload Library panel. Remove the custom library URL. Save the changes."),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Only remove the custom library URL, ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:4444/main.js"),". Removing the Inline library can break your app and cause unexpected behaviour."))),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Save your changes before uploading another library. Loading two libraries with the same service can cause unexpected behaviour in Web Designer, including losing access to your app."))),(0,i.kt)("p",null,"After saving the changes and reloading your app, Open the Update Library panel again. Instead of adding a URL, upload a file. Browse to your ",(0,i.kt)("inlineCode",{parentName:"p"},"<Inline SDK folder>/build/main.js"),". Upload the file and save the changes."),(0,i.kt)("p",null,"Return to your Inline Designer. Reload the page. The custom band should work as expected."),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"With the information learned in this post you should be able to create your own custom Inline band. The sample band can be a great place to start and explore everything the Inline SDK can do. Using Inline events and the InlineManager can give you even more powerful tools to use in your custom bands, including running VertiGIS Studio Web Commands and Operations and even VertiGIS Studio Workflows!"))}c.isMDXComponent=!0}}]);